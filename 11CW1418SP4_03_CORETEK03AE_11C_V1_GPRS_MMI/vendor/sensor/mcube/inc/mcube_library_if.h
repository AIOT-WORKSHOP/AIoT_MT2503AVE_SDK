/*****************************************************************************
 *
 * Copyright (c) 2011 - 2012 mCube, Inc.  All rights reserved.
 *
 * This source is subject to the mCube Software License.
 * This software is protected by Copyright and the information and source code
 * contained herein is confidential. The software including the source code
 * may not be copied and the information contained herein may not be used or
 * disclosed except with the written permission of mCube Inc.
 *
 * All other rights reserved.
 *
 * This code and information are provided "as is" without warranty of any
 * kind, either expressed or implied, including but not limited to the
 * implied warranties of merchantability and/or fitness for a
 * particular purpose.
 *
 *****************************************************************************
 * Revision information.  DO NOT MODIFY.  This is auto-generated by the SCM.
 *
 * $Id: mcube_library_if.h 998 2012-01-23 17:20:50Z mgibbs $
 *
 *****************************************************************************/
/**
 * Doxygen comment block
 * @file
 *
 * @brief
 *
 */

#ifndef MCUBE_LIBRARY_IF_H_
#define MCUBE_LIBRARY_IF_H_

#ifdef __cplusplus
extern "C" {
#endif

//#include <stdint.h>
//#include <stdbool.h>

#define uint8_t  U8
#define int16_t  S16
#define uint64_t  U64
#define bool   MMI_BOOL
#define uint16_t  U16
#define uint32_t  U32



/** \defgroup enumLibAPIs Sensor Library Enumerations
 * @{
 */

/** mCube Library results.
 *
 * This enumeration is used to symbolize the possible results of
 * invoking library functions.
 */
typedef enum
{
   MCUBE_LIB_SUCCESS,
   MCUBE_LIB_FAILURE,
   MCUBE_LIB_UNKNOWN_SENS,
   MCUBE_LIB_NULL_DATA_PTR,
   MCUBE_LIB_CAL_COMPLETE,
   MCUBE_LIB_INVALID_NVMID,
   MCUBE_LIB_ALREDY_OPEN,
   MCUBE_LIB_ALREADY_CLOSED,
   MCUBE_LIB_UNKNOWN_DATA_TYPE,
   MCUBE_LIB_INVALID_CFG
}mCubeLibResult_t;

/** mCube Library sensor type.
 *
 * This enumeration is used to represent the supported sensor types.
 */
typedef enum
{
   MCUBE_LIB_ACCEL
}mCubeLibSens_t;

/** mCube Library data conversion type.
 *
 * This enumeration is used in conjunction with mCube_LibDataConvert to
 * convert sensor data units to the specified type.
 */
typedef enum
{
   MCUBE_ACCEL_MG_TO_MS2, /** Milli-g to m/s^2 */
   MCUBE_ACCEL_MS2_TO_MG, /** m/s^2 to milli-g */
   MCUBE_ACCEL_DATA_ALIGN /** Align raw sensor data to device orientation */
}mCubeLibDataConvert_t;

/** mCube Library calibration types.
 *
 * This enumeration specifies the type of calibration being requested.
 */
typedef enum
{
   MCUBE_LIB_CAL_SINGLE_PT
}mCubeLibCalType_t;

/** mCube Library event types.
 *
 * This enumeration specifies the type of library events supported,
 * and is used by the user implemented mCube_LibHandler function
 * to respond to the event.
 *
 * - MCUBE_LIB_POLA_BAFR_UPD
 *      - Indicates an update to the device orientation has occurred.
 *        The result of the orientation update can be referenced through
 *        the mCube_LibHandler's void *data pointer by casting *data to
 *        an mCubeOrientationEvent_t pointer and dereferencing polaData
 *        and bafrData.
 * - MCUBE_LIB_FLIP
 *      - Indicates a flip event has occurred.  The flip order can be
 *        decoded from the mCube_LibHandler's void *data pointer by casting
 *        *data to an mCubeBafrOrientation_t pointer.
 * - MCUBE_LIB_CAL_DONE
 *      - Indicates that enough samples have been collected to complete
 *        calibration of a sensor.
 * - MCUBE_LIB_OFFSET_REQ
 *      - Indicates that currently programmed sensor offset data for a
 *        sensor is required from the hardware level.
 * - MCUBE_LIB_TAP
 *      - Indicates a tap event has been detected.
 * - MCUBE_LIB_DOUBLE_TAP
 *      - Indicates a double tap event has been detected.
 * - MCUBE_LIB_SHAKE
 *      - Indicates a shake event has been detected.  Additional shake
 *        information on direction of the shake may be referenced through
 *        the *data pointer by casting it to a pointer to an int.
 * - MCUBE_LIB_DROP
 *      - Indicates a drop event has been detected.
 * - MCUBE_LIB_STEP
 *      - Indicates that a user step has been detected.
 */
typedef enum
{
   MCUBE_LIB_POLA_BAFR_UPD,
   MCUBE_LIB_FLIP,
   MCUBE_LIB_CAL_DONE,
   MCUBE_LIB_OFFSET_REQ,
   MCUBE_LIB_TAP,
   MCUBE_LIB_DOUBLE_TAP,
   MCUBE_LIB_SHAKE,
   MCUBE_LIB_DROP,
   MCUBE_LIB_STEP
}mCubeLibEvent_t;

/** mCube Orientation event types.
 *
 * This enumeration specifies the type of orientation events reported
 * by the mCube_LibHandler function when reporting MCUBE_LIB_POLA_UPD
 * events.
 * - Up indicates the device is in portrait mode with the top of
 *   the device pointing up.
 * - Down indicates the device is in portrait mode with the top of the
 *   device pointing down.
 * - Left indicates the device is in landscape mode on its right side
 *   (tilted left as the user looks at the front of the device).
 * - Right indicates the device is in landscape mode on its left side
 *   (tilted right as the user looks at the front of the device).
 */
typedef enum
{
   POLA_ORIENTATION_UP,
   POLA_ORIENTATION_DOWN,
   POLA_ORIENTATION_LEFT,
   POLA_ORIENTATION_RIGHT
}mCubePolaOrientation_t;

/** mCube Back/Front status type.
 *
 * This enumeration indicates the back/front status of the device.
 * - Front indicates the device is laying on its back with the screen
 *   facing the sky.
 * - Back indicates the device is laying on its front with the screen
 *   facing the ground.
 */
typedef enum
{
   BAFR_ORIENTATION_UNKNOWN,
   BAFR_ORIENTATION_FRONT,
   BAFR_ORIENTATION_BACK
}mCubeBafrOrientation_t;

/** mCube Flip event types.
 *
 * This enumeration specifies the type of flip event reported,
 * by the mCube_LibHandler function when reporting MCUBE_LIB_FLIP.
 * A flip from front to back indicates the user has turned the
 * device over to face down.  A flip from back to front indicates
 * the user has turned the device over to face up.
 */
typedef enum
{
   FLIP_UNKNOWN,
   FLIP_FRONT_TO_BACK,
   FLIP_BACK_TO_FRONT
}mCubeFlipEvent_t;

/** mCube Shake event types.
 *
 * This enumeration specifies the type of shakes supported in the bitfield
 * for each axis and is used by the user implemented mCube_LibEventHandler
 * function to respond to the shake events.
 */
typedef enum
{
   SHAKE_NONE,
   SHAKE_NEG,
   SHAKE_POS
} mCubeShakeEvent_t;

/** mCube chip-to-platform orientation.
 *
 * This enumeration specifies the chip-to-platform orientation based on
 * how the chip is mounted on the device as compared to the user defined
 * platform orientation.  TOP refers to being mounted on top of the board
 * and indicates that the Z-axis polarity is aligned with the device z-axis
 * reference frame.  LEFT/RIGHT and UP/Down refers to the location of the
 * Pin one dot indicator on the sensor chip.  The following table illustrates
 * the relationship between the device and chip axes based on the orientation
 * provided:
 * - CHIP_TOP_LEFT_UP
 *      - X-axis acceleration of device = sensor Y-axis acceleration
 *      - Y-axis acceleration of device = - sensor X-axis acceleration
 *      - Z-axes aligned
 * - CHIP_TOP_RIGHT_UP
 *      - X-axis acceleration of device = - sensor X-axis acceleration
 *      - Y-axis acceleration of device = - sensor Y-axis acceleration
 *      - Z-axes aligned
 * - CHIP_TOP_RIGHT_DOWN
 *      - X-axis acceleration of device = - sensor Y-axis acceleration
 *      - Y-axis acceleration of device = sensor X-axis acceleration
 *      - Z-axes aligned
 * - CHIP_TOP_LEFT_DOWN
 *      - X-axis acceleration of device = sensor X-axis acceleration
 *      - Y-axis acceleration of device = sensor Y-axis acceleration
 *      - Z-axes aligned
 * - CHIP_BOTTOM_LEFT_UP
 *      - X-axis acceleration of device = sensor X-axis acceleration
 *      - Y-axis acceleration of device = - sensor Y-axis acceleration
 *      - Z-axes acceleration of device = - sensor Z-axis acceleration
 * - CHIP_BOTTOM_RIGHT_UP
 *      - X-axis acceleration of device = - sensor Y-axis acceleration
 *      - Y-axis acceleration of device = - sensor X-axis acceleration
 *      - Z-axes acceleration of device = - sensor Z-axis acceleration
 * - CHIP_BOTTOM_RIGHT_DOWN
 *      - X-axis acceleration of device = - sensor X-axis acceleration
 *      - Y-axis acceleration of device = sensor Y-axis acceleration
 *      - Z-axes acceleration of device = - sensor Z-axis acceleration
 * - CHIP_BOTTOM_LEFT_DOWN
 *      - X-axis acceleration of device = sensor Y-axis acceleration
 *      - Y-axis acceleration of device = sensor X-axis acceleration
 *      - Z-axes acceleration of device = - sensor Z-axis acceleration
 */
typedef enum
{
   CHIP_TOP_LEFT_UP,
   CHIP_TOP_RIGHT_UP,
   CHIP_TOP_RIGHT_DOWN,
   CHIP_TOP_LEFT_DOWN,
   CHIP_BOTTOM_LEFT_UP,
   CHIP_BOTTOM_RIGHT_UP,
   CHIP_BOTTOM_RIGHT_DOWN,
   CHIP_BOTTOM_LEFT_DOWN
}mCubeOrientation_t;

/** mCube Step sensitivity setting.
 *
 * This enumeration specifies the desired sensitivity of the mCube
 * step algorithm.
 * - STEP_SENS_LOW:
 *    - This setting provides the greatest resistance to false step
 *      detection, but low energy steps may be missed.  This setting
 *      is the recommended default value.
 * - STEP_SENS_MED:
 *    - This setting provides a middle ground for step detection and
 *      false step rejection.
 * - STEP_SENS_HIGH:
 *    - This setting provides high sensitivity for step detection,
 *      but may yield additional false step detections.
 */
typedef enum
{
   STEP_SENS_LOW,
   STEP_SENS_MED,
   STEP_SENS_HIGH
}mCubeStepSens_t;

/** @} End of enumerations */

/** \defgroup defineLibAPIs Sensor Library Defines
 * @{
 */

/** mCube defined value for converting g-units to m/s^2 */
#define MCUBE_LIB_STD_G   (9.8017f)

/** @} End of defines */

/** \defgroup structLibAPIs Sensor Library Structures
 * @{
 */

/** Orientation event data.
 *
 * Event data structure used in mCube_LibHandler() to decode a
 * MCUBE_LIB_POLA_BAFR_UPD event result.  The device may be oriented
 * in any combination up front/back and left/right/up/down.
 */
typedef struct
{
   /** Enumeration indicating left, right, up, or down */
   mCubePolaOrientation_t polaData;
   /** Enumeration indicating front, back, or unknown */
   mCubeBafrOrientation_t bafrData;
}mCubeOrientationEvent_t;

/** Accelerometer Sensor Data.
 *
 * The mCubeLibAccelData_t structure holds accelerometer data indicating
 * acceleration on the X, Y, and Z axes in units of m/s^2, a status
 * byte, and a system time stamp indicating the time the sample was
 * collected.
 */
typedef struct
{
   /** Accelerometer status */
   uint8_t status;
   /** X axis acceleration in m/s^2 */
   float xAccel;
   /** Y axis acceleration in m/s^2 */
   float yAccel;
   /** Z axis acceleration in m/s^2 */
   float zAccel;
   /** System time stamp in milliseconds */
   uint64_t timeStampMs;
}mCubeLibAccelData_t;

/** Accelerometer Offset Data.
 *
 * The mCubeLibAccelOffset_t structure holds accelerometer offset data
 * used to configure the sensor hardware offsets.
 */
typedef struct
{
   /** X-axis offset */
   int16_t xOffset;
   /** Y-axis offset */
   int16_t yOffset;
   /** Z-axis offset */
   int16_t zOffset;
   /** X-axis gain */
   int16_t xGain;
   /** Y-axis gain */
   int16_t yGain;
   /** Z-axis gain */
   int16_t zGain;
}mCubeLibAccelOffset_t;

/** Flip Control Data.
 *
 * The mCubeAccelInit_t structure holds accelerometer configuration data
 * used to initialize the mCube accelerometer based algorithms.
 * - flipEnable
 *   - Set to true to enable reporting of flip updates.
 * - tFlipInterval
 *   - Sets the window of time used for flip detection.  Lower values
 *     improve "quick flip" detection, but decrease the probability of
 *     detecting slower flip events.  The valid range of values is 0.6 to 1.5.
 *     A value of 1.2 is recommended by default.
 * - tFlipDebounce
 *   - Prevents a single flip event from being reported as multiple
 *     flips.  Larger values provide increased protection from triggering
 *     multiple flips erroneously, at the expense of increasing the time
 *     between the detection of legitimate flip events.  The valid range of
 *     values is 0.1 to 2.0, with 0.4 as the recommended default.
 * - flipFilter
 *   - This parameter tunes the flip detection sensitivity to the shaking
 *     of the device.  Lower values reduce sensitivity to hard shaking, but
 *     introduces a lag to event reporting.  Valid values for flipFilter
 *     range from 0.3 to 1.0, with 0.7 used as the recommended value.
 * - flipThreshold
 *   - This parameter is used to control the amount of rotation used to
 *     signify a flip event.  Lower values decrease the angular rotation
 *     required to trigger a flip event.  Valid values range from -0.5 to
 *     0.0, with -0.3 as the recommended default value.
 *
 */
typedef struct
{
   /* Enable flip */
   bool flipEnable;
   /* Flip detection interval */
   float tFlipInterval;
   /* Flip de-bounce time in seconds */
   float tFlipDebounce;
   /* Flip filter control */
   float flipFilter;
   /* Flip detection threshold */
   float flipThreshold;
}mCubeFlipInit_t;

/** Portrait/Landscape and Back/Front Configuration Data.
 *
 * The mCubeAccelInit_t structure holds accelerometer configuration data
 * used to initialize the mCube accelerometer based algorithms.
 * - enableUpdate
 *   - Set to true to enable reporting of POLA/BAFR updates.
 * - polaUpdRateHz
 *   - The Update rate of POLA/BAFR library events.  This value is intended
 *     to provide the capability to slow the rate of POLA/BAFR event reporting.
 *     Specifying a value of zero results in only reporting updates if there
 *     is a change in device orientation.  Specifying a value higher than
 *     the sample rate of accelerometer data will be limited to the
 *     accelerometer data rate.
 *
 */
typedef struct
{
   /** Enable POLA/BAFR updates */
   bool enableUpdate;
   /** Update rate of POLA/BAFR events */
   uint16_t polaUpdRateHz;
   mCubeFlipInit_t flipCntrl;
}mCubePolaBafrInit_t;

/** Accelerometer Configuration Data.
 *
 * The mCubeAccelInit_t structure holds accelerometer configuration data
 * used to initialize the mCube accelerometer based algorithms.
 * - accelOrientation
 *   - The orientation of the accelerometer
 * - polaUpdRateHz
 *   - The Update rate of POLA/BAFR library events.  This value is intended
 *     to provide the capability to slow the rate of POLA/BAFR event reporting.
 *
 */
typedef struct
{
	/** Accelerometer chip orientation data */
   mCubeOrientation_t accelOrientation;
   /** POLA/BAFR event controls */
   mCubePolaBafrInit_t accelPolaBafrInit;
}mCubeAccelInit_t;

/** Step Detect Configuration Data.
 *
 * The mCubePedInit_t structure holds step detection configuration data
 * used to initialize the step detection algorithm.
 * - stepSensitivity
 *    - Determines the sensitivity of the step detection software, valid
 *      settings are STEP_SENS_LOW, STEP_SENS_MED, and STEP_SENS_HIGH.
 *
 */
typedef struct
{
   /** Step detection sensitivity */
   mCubeStepSens_t stepSensitivity;
}mCubePedInit_t;

/** Library Initialization Data
 *
 * The mCubeLibInit_t structure contains library initialization values
 * for the entire mCube software library.
 *
 */
typedef struct
{
   /** Accelerometer based algorithms initialization data */
   mCubeAccelInit_t accelInit;
   /** Step algorithm initialization data */
   mCubePedInit_t stepInit;
}mCubeLibInit_t;

/** @} End of structures */

/** \defgroup fnLibAPIs Sensor Library Interface Functions */
/* @{ */

/** Sensor Library Initialization function.
 *
 * Initializes the mCube sensor library.
 *
 * @param[in] initData Initialization data structure for the mCube
 *                     library.
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibOpen(mCubeLibInit_t *initData);

/** Sensor Library Close function.
 *
 * Closes the mCube sensor library and any open resources it may
 * be utilizing.
 *
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibClose(void);

/** Sensor Calibration Start function.
 *
 * Sets up the mCube library for processing calibration for the
 * specified sensor.
 *
 * @param[in] sensor Type of sensor being calibrated.
 * @param[in] type Type of sensor calibration requested.
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibCalStart(mCubeLibSens_t sensor,
                                   mCubeLibCalType_t type);

/** Library calibration application function.
 *
 * Applies stored sensor calibration data by loading stored sensor
 * offset values from NVM and invoking mCube_LibHandler.
 *
 * @param[in] sensor Type of sensor whose offsets are to be restored.
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibCalApply(mCubeLibSens_t sensor);

/** Sensor data processing function.
 *
 * Input sensor data into the mCube sensor library for event detection
 * and sensor calibration.  Before invoking mCube_LibProcessData, the
 * raw sensor data should be re-aligned to device orientation by calling
 * mCube_LibDataConvert() with the appropriate sensor data alignment
 * enumeration specified as the conversion type.  The specifics for
 * passing data into the library is as follows:
 * - MCUBE_LIB_ACCEL
 *      - The accelerometer data should be passed into the
 *        mCube_LibProcessData function contained in a pointer to a
 *        mCubeLibAccelData_t data structure and samples set to one.
 *        If an array of structures has been formed, and populated
 *        with aligned sensor data, pass the address of the first
 *        element and use samples to indicate the number of sensor
 *        data sets available for processing.
 *
 * @param[in] sensor Type of sensor whose offsets are to be restored.
 * @param[in] *sensData Pointer to sensor data.
 * @param[in] samples Number of input samples.
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibProcessData(mCubeLibSens_t sensor,
                                      void *sensData,
                                      int samples);

/** Library version request function.
 *
 * Returns a 32-bit library version value to the uint32_t pointer *version.
 *
 * @param[out] *version Pointer to a uint32_t that will hold the 32-bit
 *                      library version information.
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibPollVersion(uint32_t *version);

/** Sensor data conversion function.
 *
 * Converts sensor data between different unit types specified by
 * convertType.  Data should be formatted as follows:
 *
 * - MCUBE_ACCEL_MG_TO_MS2
 *      - Input should point to an int16_t data type, or an array of
 *        int16_t data types.  Output is a pointer to a float, or an
 *        array of floats with the converted value of the corresponding
 *        array offset.
 * - MCUBE_ACCEL_MS2_TO_MG
 *      - Input should point to a float data type, or an array of floats.
 *        Output is a pointer to an int16_t or an array of int16_t data
 *        types containing the converted value at corresponding array
 *        offsets from the input.
 * - MCUBE_ACCEL_DATA_ALIGN
 *      - Input should point to a mCubeLibAccelData_t structure, output
 *        should also point to an mCubeLibAccelData_t structure to store
 *        the re-oriented values.  The numValues field may be used to
 *        indicate that an array of mCubeLibAccelData_t structures has
 *        been passed in for data alignment, however the output pointer
 *        should point to a same sized array of elements to avoid memory
 *        overwriting.
 *
 * @param[in] convertType Type of data conversion to be performed.
 * @param[in] *in Pointer to data to be converted.
 * @param[out] *out Pointer to an output data variable or array containing
 *                  enough space to store all converted values.
 * @param[in] numValues Number of values to be converted.
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibDataConvert(mCubeLibDataConvert_t convertType,
                                      void *in,
                                      void *out,
                                      int numValues);

/* User Implemented functions */

/** Library notification function.
 *
 * This function provides notifications of sensor events such as motion
 * events and calibration completion events.  The following points
 * indicate how to decode the event specific data:
 * - MCUBE_LIB_POLA_BAFR_UPD
 *      - The data pointer points to an mCubeOrientationEvent_t structure
 *        which contains current orientation information at the time of
 *        the update.
 * - MCUBE_LIB_FLIP
 *      - The data pointer points to an mCubeFlipEvent_t structure that indicates
 *        if the flip result is from front-to-back, or back-to-front.
 * - MCUBE_LIB_CAL_DONE
 *      - The data pointer points to a sensor specific calibration structure:
 *           - mCube Accelerometer uses the mCubeLibAccelOffset_t structure
 *             to pass calibration data back to the user for calibration of
 *             the mCube accelerometer.  The mCube accelerometer driver
 *             provides an API for writing this data to the sensor.
 * - MCUBE_LIB_OFFSET_REQ
 *      - The data pointer points to a sensor specific calibration structure:
 *           - mCube Accelerometer uses the mCubeLibAccelOffset_t structure
 *             to pass calibration data in and out of the library.  The
 *             mCube driver provides an API to retrieve this data.  This data
 *             is returned to the library by populating the data pointer.
 * - MCUBE_LIB_TAP
 *      - No additional data provided by the data pointer.
 * - MCUBE_LIB_DOUBLE_TAP
 *      - No additional data provided by the data pointer.
 * - MCUBE_LIB_SHAKE
 *      - The data pointer points to an int whose 6 lsbs are used to
 *        store the shake results according to the mCubeShakeEvent_t
 *        enumerated type (00'b - No shake on axis, 01'b - shake in negative
 *        direction on axis, 10'b - shake in positive direction on axis):
 *           - Bits [0:1]  X-axis
 *           - Bits [2:3]  Y-axis
 *           - Bits [3:4]  Z-axis
 * - MCUBE_LIB_DROP
 *      - No additional data provided by the data pointer.
 * - MCUBE_LIB_STEP
 *      - No additional data provided by the data pointer.
 *
 * @param[in] sensor Type of sensor that triggered event.
 * @param[in] event Type of event that occurred.
 * @param[in,out] *data Event specific data pointer.
 * @return mCubeLibResult_t indicating success or failure.
 */
mCubeLibResult_t mCube_LibHandler(mCubeLibSens_t sensor,
                                  mCubeLibEvent_t event,
                                  void *data);

/** @} End of functions */

#ifdef __cplusplus
}
#endif

#endif /* MCUBE_LIBRARY_IF_H_ */
